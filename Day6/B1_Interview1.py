from SinglyLinkedList import SinglyLinkedList as sll

# Class LinkedListSolution coi nh∆∞ l√† class m·ªü r·ªông c·ªßa sll
class LinkedListSolution(sll):
    # Ph∆∞∆°ng th·ª©c remove_duplicate ƒë√£ bao g·ªìm c·∫£ tr∆∞·ªùng h·ª£p kh√¥ng s·∫Øp x·∫øp
    # Nh∆∞ng v·∫´n vi·∫øt l·∫°i cho nh·ªõ üòâ
    def remove_duplicate_unsorted(self):
        # R√†ng bu·ªôc
        if not self.head:
            return None
        # T·∫°o m·ªôt set ch·ª©a gi√° tr·ªã duy nh·∫•t xu·∫•t hi·ªán trong sll
        visited = set()

        current = self.head
        prev = None
        while current:
            # N·∫øu ƒë√£ xu·∫•t hi·ªán, lo·∫°i b·ªè node ƒëang duy·ªát (prev tr·ªè t·ªõi node ti·∫øp theo)
            if current.data in visited:
                self.length -= 1
                if prev:
                    prev.next = current.next
                else:
                    self.head = current.next
                current = current.next
                
             # n·∫øu node.data ch∆∞a xu·∫•t hi·ªán trong set
            else:
                visited.add(current.data)
                # G√°n prev b·∫±ng node hi·ªán ƒëang duy·ªát 
                prev = current
                current = current.next

ll = LinkedListSolution()

ll.append(4)
ll.append(5)
ll.append(1)
ll.append(2)
ll.append(2)
ll.append(3)
ll.append(4)
ll.remove_duplicate_unsorted()
print(ll)
