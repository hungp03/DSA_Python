# -*- coding: utf-8 -*-
"""Set.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Km5RP5C6gpvh7A2j3DP-NIFOkk0dRMYz

# Set in Python
Notebook được thực hiện bởi Phạm Văn Hùng - N21DCCN035

#### Khởi tạo set bằng cú pháp `set = {}`
"""

# create a set
animals = {"cat", "dog", "tiger"}

print(type(animals))
print(animals)

"""Set cũng hỗ trợ đa dạng các loại dữ liệu"""

# create a set
a_set = {"cat", 5, True, 40.0}

print(type(a_set))
print(a_set)

"""Set sẽ không có nhân bản của phần tử, mỗi phần tử chỉ xuất hiện 1 lần"""

# No duplication
animals = {"cat", "dog", "tiger"}
print(animals)

animals.add("cat")
print(animals)

"""Sử dụng hàm copy để copy một set thay vì phải dùng thư viện `copy` như `tuple`"""

# copy
animals = {"cat", "dog", "tiger"}
print("Animals:", animals)

a_copy = animals.copy()
print("Copy:", a_copy)

"""Duyệt qua các phần tử trong `set` sử dụng vòng lặp `for`"""

# accessing items
animals = {"cat", "dog", "tiger"}
for animal in animals:
    print(animal)

"""`set` không hỗ trợ truy vấn chỉ mục (`index`) vì các phần tử trong set sắp xếp một cách ngẫu nhiên"""

# not support indexing
# animals = {"cat", "dog", "tiger"}
# print(animals[1])

"""#### Các phương thức cơ bản

Thêm một phần tử sử dụng phương thức `add()`
"""

# add an item
animals = {"cat", "dog", "tiger"}
animals.add("bear")
print(animals)

"""Cập nhật `set` với việc bổ sung từ set khác qua hàm `update()`"""

# insert a set to another set
animals = {"cat", "dog", "tiger"}
animals.update({"chicken","Duck"})
print(animals)

"""Gộp 2 set với nhau thông qua phương thức `union()`"""

set1 = {"cat", "dog"}
set2 = {"duck", "tiger"}

set3 = set1.union(set2)
print(set3)

"""#### Loại bỏ phần tử trong set

Loại bỏ một phần tử sử dụng phương thức `remove()`. Nếu phần tử không tồn tại, ngoại lệ `KeyError` sẽ được thả ra
"""

# remove an item
animals = {"cat", "dog", "tiger"}
animals.remove("dog")
print(animals)

# remove an item
# animals = {"cat", "dog", "tiger"}
# animals.remove("lion")
# print(animals)

"""Thay vì dùng phương thức `remove()`, ta có thể dùng `discard()`. Vì khi không có phần tử trong set, `discard()` sẽ bỏ qua và không báo lỗi"""

# remove an item
animals = {"cat", "dog", "tiger"}
animals.discard("lion")
print(animals)

# remove an item
animals = {"cat", "dog", "tiger"}
animals.discard("tiger")
print(animals)

"""#### Set không chấp nhận kiểu dữ liệu có thể thay đổi (mutable)"""

# a_list = [1, 2, 3]
# a_set  = {"cat", a_list}
# print(a_set)

"""Ở đây, list là kiểu mutable nên set sẽ không chấp nhận

#### Tìm các phần tử khác nhau trong set
Sử dụng phương thức `difference()` để tìm các phần tử khác nhau trong 2 set
"""

# difference

set1 = {"apple", "banana", "cherry"}
set2 = {"pineapple", "apple"}

set3 = set1.difference(set2)

print(set3)

"""Cập nhật các phần tử không có trong 1 set ở set còn lại bằng `difference_update()`"""

set1 = {"apple", "banana", "cherry"}
set2 = {"pineapple", "apple"}

set1.difference_update(set2)

print(set1)

"""Phương thức `id()` lấy id của một đối tượng"""

set1 = {"apple", "banana", "cherry"}
set2 = {"pineapple", "apple"}

print(id(set1))
set1.difference_update(set2)

print(set1)
print(id(set1))

"""Ta thấy rằng id không thay đổi, tức là phương thức `difference_update(set2)` thực hiện trực tiếp trên `set1` với việc loại bỏ khỏi set1 những phần tử có trong `set2`

Phương thức `symmetric_difference()` trả về một tập hợp chứa các phần tử không phổ biến (không trùng nhau) giữa hai đối tượng. Nó tương đương với việc thực hiện phép toán(xor) trên hai tập hợp
"""

# symmetric_difference

set1 = {"apple", "banana", "cherry"}
set2 = {"pineapple", "apple"}

set3 = set1.symmetric_difference(set2)

print(set3)

"""Phương thức `symmetric_difference_update()` thực hiện việc cập nhật set, bằng cách loại bỏ các phần tử chung và thêm vào các phần tử không trùng giữa hai tập hợp"""

# symmetric_difference_update

set1 = {"apple", "banana", "cherry"}
set2 = {"pineapple", "apple"}

set1.symmetric_difference_update(set2)

print(set1)

"""#### AND, OR, XOR, SUBTRACTION

Phép AND(&) trong set trả về những phần tử trùng nhau
"""

set1 = {1, 2, 3}
set2 = {3, 4, 5}

print(set1 & set2)

"""Phép OR(|) lấy tất cả các phần tử thuộc các set"""

set1 = {1, 2, 3}
set2 = {3, 4, 5}

print(set1 | set2)

"""Phép XOR(^) trả về những phần tử chỉ thuộc về 1 set nhưng không thuộc cả 2"""

set1 = {1, 2, 3}
set2 = {3, 4, 5}

print(set1 ^ set2)

"""SUBTRACTION(-) loại bỏ các phần tử xuất hiện trong set2 của set1. Tức là chỉ lấy các phần tử thuộc set1 nhưng không thuộc set2"""

set1 = {1, 2, 3}
set2 = {3, 4, 5}

print(set1 - set2)

"""#### Set comprehension
Sử dụng set comprehension để tạo một set dựa trên một biểu thức và một vòng lặp

VD: tạo một set chứa bình phương các số từ 0 đến 9
"""

# set comprehension

aSet = {i*i for i in range(10)}
print(aSet)

"""#### Convert
Ta có thể chuyển đổi qua lại giữa các kiểu dữ liệu bằng cách ép kiểu
"""

# convert from set to list
aSet = {1, 2, 3, 4, 5}

aList = list(aSet)
print(aList)
print(type(aList))

# convert from set to tuple
aSet = {1, 2, 3, 4, 5}

aTuple = tuple(aSet)
print(aTuple)
print(type(aTuple))

# convert from list to set
aList = [1, 2, 3, 2, 1]

aSet = set(aList)
print(aSet)
print(type(aSet))

# convert from tuple to set
aTuple = (1, 2, 3, 2, 1)

aSet = set(aTuple)
print(aSet)
print(type(aSet))

"""# Thao tác với file
Mở file: `open()`

Đọc nội dung: `read()`

Đóng file: `close()`
"""

# kết nối với file
import os
cwd =os.getcwd()
r = 'data.txt'
a = fr'{cwd}\{r}'
a_file = open(a,'r')

# read content
data = a_file.read()
print(data)

# Đóng kết nối với file
a_file.close()

"""Thay thế các dấu chấm (.) bằng dấu phẩy (,) qua hàm `replace()`"""

data = data.replace('.', '')
print(data)

"""Thay thế dấu phẩy bằng dấu cách

"""

data = data.replace(',', '')
print(data)

"""Thay thế dấu gạch ngang bằng dấu cách"""

data = data.replace('-', ' ')
print(data)

"""Chuyển đổi chữ hoa sang chữ thường dùng `lower()`"""

data = data.lower()
print(data)

"""Tách chuỗi thành list các chuỗi con, mặc định tách theo dấu cách"""

data = data.split()
print(data)
print(len(data))

"""Trả về các chuỗi duy nhất, các chuỗi lặp lại sẽ chỉ xuất hiện 1 lần"""

data = set(data)
print(data)
print(len(data))

"""Khởi tạo enumerate và in ra index cùng giá trị của nó

enumerate cung cấp một bộ đếm vào iterable và trả chúng dưới dạng đối tượng liệt kê
"""

for index, value in enumerate(data):
    print(index, value)